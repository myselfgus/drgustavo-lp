---
// Chat Widget - Assistente de navegação com Workers AI
---

<button
  id="chat-toggle"
  class="chat-toggle"
  type="button"
  aria-label="Abrir assistente de navegação"
  aria-expanded="false"
  aria-controls="chat-panel"
>
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
  </svg>
  <span class="chat-badge">Ajuda</span>
</button>

<aside id="chat-panel" class="chat-panel" aria-hidden="true">
  <div class="chat-header">
    <div>
      <h3>Assistente de Navegação</h3>
      <p>Tire dúvidas sobre o método</p>
    </div>
    <button
      id="chat-close"
      class="chat-close"
      type="button"
      aria-label="Fechar chat"
    >
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M18 6L6 18M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <div id="chat-messages" class="chat-messages">
    <div class="chat-message chat-message--assistant">
      <p>Olá! Posso te ajudar a navegar o site ou tirar dúvidas sobre o método do Dr. Gustavo. Como posso ajudar?</p>
    </div>
  </div>

  <form id="chat-form" class="chat-form">
    <input
      type="text"
      id="chat-input"
      class="chat-input"
      placeholder="Digite sua pergunta..."
      aria-label="Mensagem do chat"
      autocomplete="off"
      disabled
    />
    <button
      type="submit"
      class="chat-submit"
      aria-label="Enviar mensagem"
      disabled
    >
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"></path>
      </svg>
    </button>
  </form>

  <div class="chat-notice">
    <small>Assistente automático. Não substitui consulta médica.</small>
  </div>
</aside>

<style>
  /* Chat Toggle Button */
  .chat-toggle {
    position: fixed;
    bottom: 24px;
    left: 24px;
    z-index: 999;
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 16px;
    background: #FFFFFF;
    border: 1px solid rgba(31, 62, 70, 0.15);
    border-radius: 50px;
    color: #1A1A1A;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transition: all 0.2s ease;
  }

  .chat-toggle:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
  }

  .chat-toggle svg {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }

  .chat-badge {
    font-size: 0.875rem;
    font-weight: 500;
    white-space: nowrap;
  }

  /* Chat Panel */
  .chat-panel {
    position: fixed;
    bottom: 24px;
    left: 24px;
    z-index: 1000;
    width: 380px;
    max-width: calc(100vw - 48px);
    max-height: 600px;
    background: #FFFFFF;
    border: 1px solid rgba(31, 62, 70, 0.12);
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    display: flex;
    flex-direction: column;
    opacity: 0;
    visibility: hidden;
    transform: translateY(20px) scale(0.95);
    transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s;
  }

  .chat-panel[aria-hidden="false"] {
    opacity: 1;
    visibility: visible;
    transform: translateY(0) scale(1);
  }

  /* Header */
  .chat-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 16px;
    border-bottom: 1px solid rgba(31, 62, 70, 0.08);
  }

  .chat-header h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    color: #1A1A1A;
  }

  .chat-header p {
    margin: 2px 0 0 0;
    font-size: 0.8125rem;
    color: #666666;
  }

  .chat-close {
    padding: 4px;
    background: transparent;
    border: none;
    color: #666666;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .chat-close:hover {
    background: rgba(31, 62, 70, 0.05);
    color: #1A1A1A;
  }

  /* Messages */
  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    max-height: 400px;
  }

  .chat-message {
    display: flex;
    flex-direction: column;
    gap: 4px;
    max-width: 85%;
    animation: messageSlideIn 0.3s ease;
  }

  @keyframes messageSlideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .chat-message p {
    margin: 0;
    padding: 10px 12px;
    border-radius: 12px;
    font-size: 0.9375rem;
    line-height: 1.5;
  }

  .chat-message--user {
    align-self: flex-end;
    align-items: flex-end;
  }

  .chat-message--user p {
    background: rgba(31, 62, 70, 0.92);
    color: #FFFFFF;
    border-bottom-right-radius: 4px;
  }

  .chat-message--assistant {
    align-self: flex-start;
    align-items: flex-start;
  }

  .chat-message--assistant p {
    background: rgba(125, 168, 123, 0.08);
    color: #1A1A1A;
    border: 1px solid rgba(125, 168, 123, 0.12);
    border-bottom-left-radius: 4px;
  }

  .chat-message--loading p {
    background: rgba(125, 168, 123, 0.08);
    border: 1px solid rgba(125, 168, 123, 0.12);
    color: #666666;
    font-style: italic;
  }

  /* Form */
  .chat-form {
    display: flex;
    gap: 8px;
    padding: 12px 16px;
    border-top: 1px solid rgba(31, 62, 70, 0.08);
  }

  .chat-input {
    flex: 1;
    padding: 10px 12px;
    border: 1px solid rgba(31, 62, 70, 0.15);
    border-radius: 8px;
    font-size: 0.9375rem;
    font-family: inherit;
    background: #FAFAF8;
    color: #1A1A1A;
    transition: all 0.2s ease;
  }

  .chat-input:focus {
    outline: none;
    border-color: rgba(31, 62, 70, 0.3);
    background: #FFFFFF;
  }

  .chat-input:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .chat-submit {
    padding: 10px 12px;
    background: #1A1A1A;
    border: none;
    border-radius: 8px;
    color: #FFFFFF;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .chat-submit:hover:not(:disabled) {
    background: #2C2C2C;
    transform: translateY(-1px);
  }

  .chat-submit:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  /* Notice */
  .chat-notice {
    padding: 8px 16px 12px;
    text-align: center;
  }

  .chat-notice small {
    font-size: 0.75rem;
    color: #999999;
  }

  /* Mobile */
  @media (max-width: 767px) {
    .chat-toggle {
      bottom: 80px;
      left: 16px;
    }

    .chat-toggle .chat-badge {
      display: none;
    }

    .chat-panel {
      bottom: 80px;
      left: 16px;
      right: 16px;
      width: auto;
      max-height: 500px;
    }

    .chat-messages {
      max-height: 300px;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .chat-toggle,
    .chat-panel,
    .chat-message {
      transition: none;
      animation: none;
    }
  }
</style>

<script>
  function initChatWidget() {
    const toggle = document.getElementById('chat-toggle');
    const panel = document.getElementById('chat-panel');
    const close = document.getElementById('chat-close');
    const form = document.getElementById('chat-form') as HTMLFormElement;
    const input = document.getElementById('chat-input') as HTMLInputElement;
    const submit = form?.querySelector('.chat-submit') as HTMLButtonElement;
    const messages = document.getElementById('chat-messages');

    if (!toggle || !panel || !form || !input || !messages) return;

    const sessionId = crypto.randomUUID();
    let isOpen = false;

    // Toggle panel
    function togglePanel() {
      isOpen = !isOpen;
      panel!.setAttribute('aria-hidden', String(!isOpen));
      toggle!.setAttribute('aria-expanded', String(isOpen));

      if (isOpen) {
        input!.disabled = false;
        submit!.disabled = false;
        setTimeout(() => input!.focus(), 300);
      }
    }

    toggle.addEventListener('click', togglePanel);
    close?.addEventListener('click', togglePanel);

    // Send message
    async function sendMessage(content: string) {
      if (!content.trim()) return;

      // Add user message
      const userMsg = document.createElement('div');
      userMsg.className = 'chat-message chat-message--user';
      userMsg.innerHTML = `<p>${escapeHtml(content)}</p>`;
      messages!.appendChild(userMsg);
      messages!.scrollTop = messages!.scrollHeight;

      input!.value = '';
      input!.disabled = true;
      submit!.disabled = true;

      // Add loading indicator
      const loadingMsg = document.createElement('div');
      loadingMsg.className = 'chat-message chat-message--loading';
      loadingMsg.innerHTML = '<p>Pensando...</p>';
      messages!.appendChild(loadingMsg);
      messages!.scrollTop = messages!.scrollHeight;

      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            messages: [{ role: 'user', content }],
            sessionId
          })
        });

        messages!.removeChild(loadingMsg);

        if (!response.ok) throw new Error('Erro na resposta');

        // Stream response
        const reader = response.body?.getReader();
        const decoder = new TextDecoder();

        const assistantMsg = document.createElement('div');
        assistantMsg.className = 'chat-message chat-message--assistant';
        assistantMsg.innerHTML = '<p></p>';
        messages!.appendChild(assistantMsg);

        const p = assistantMsg.querySelector('p');
        let text = '';

        if (reader && p) {
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value);
            text += chunk;
            p.textContent = text;
            messages!.scrollTop = messages!.scrollHeight;
          }
        }
      } catch (error) {
        messages!.removeChild(loadingMsg);
        const errorMsg = document.createElement('div');
        errorMsg.className = 'chat-message chat-message--assistant';
        errorMsg.innerHTML = '<p>Desculpe, ocorreu um erro. Tente novamente.</p>';
        messages!.appendChild(errorMsg);
      } finally {
        input!.disabled = false;
        submit!.disabled = false;
        input!.focus();
        messages!.scrollTop = messages!.scrollHeight;
      }
    }

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      sendMessage(input.value);
    });

    function escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initChatWidget);
  } else {
    initChatWidget();
  }
</script>
