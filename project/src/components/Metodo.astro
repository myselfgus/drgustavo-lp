---
import '../styles/sections/metodo.css';

const steps = [
  {
    title: 'Escuta ativa',
    description: 'Consulta de 120 minutos onde sua história é ouvida com atenção. Sem pressa, sem interrupções, abrindo espaço para compreender o seu contexto real.'
  },
  {
    title: 'Análise comportamental',
    description: 'Uso inteligência artificial para identificar padrões sutis e cruzar sinais clínicos com seus relatos, aumentando a precisão sem substituir a escuta.'
  },
  {
    title: 'Documentação narrativa',
    description: 'Transformo o encontro em um registro claro, organizado por temas, que facilita rever decisões e compartilhar com quem acompanha sua jornada.'
  },
  {
    title: 'Plano terapêutico vivo',
    description: 'Integro medicamentos, canabinoides quando indicado e estratégias comportamentais específicas, revisando tudo com você a cada etapa.'
  }
];
---

<section id="metodo" class="metodo" aria-labelledby="metodo-title">
  <div class="metodo__content container">
    <div class="metodo__header">
      <span class="metodo__eyebrow" data-animate="fade-right">Método</span>
      <h2 id="metodo-title" class="metodo__title" data-animate="fade-right">Como conduzimos cada etapa</h2>
      <p class="metodo__lead" data-animate="fade-right">
        Uma jornada contínua que alterna análise, co-criação e ajustes frequentes — sempre com transparência sobre o que está funcionando e o que precisa mudar.
      </p>
      <p class="metodo__hint" data-animate="fade-right">Quatro movimentos que sustentam cada acompanhamento, da primeira escuta aos ajustes contínuos.</p>
    </div>

    <div class="metodo__journey" data-metodo-journey>
      <div class="metodo__stages" data-stagger>
        {steps.map((step, index) => (
          <button
            class={`metodo__stage${index === 0 ? ' is-active' : ''}`}
            type="button"
            data-metodo-stage={index}
            aria-expanded={index === 0 ? 'true' : 'false'}
          >
            <span class="metodo__stage-number">{String(index + 1).padStart(2, '0')}</span>
            <span class="metodo__stage-title">{step.title}</span>
          </button>
        ))}
      </div>

      <div class="metodo__panel" aria-live="polite" data-metodo-stage-root data-stage="0">
        <div class="metodo__panel-inner">
          <div class="metodo__panel-media" aria-hidden="true"></div>
          <div class="metodo__panel-copy">
            <h3 class="metodo__panel-title">{steps[0].title}</h3>
            <p class="metodo__panel-text" data-metodo-panel>{steps[0].description}</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ metodoStages: steps }} is:inline>
  const journey = document.querySelector('[data-metodo-journey]');

  if (journey) {
    const stages = Array.from(journey.querySelectorAll('[data-metodo-stage]'));
    const panel = journey.querySelector('[data-metodo-panel]');
    const panelTitle = journey.querySelector('.metodo__panel-title');
    const panelRoot = journey.querySelector('[data-metodo-stage-root]');
    let activeIndex = 0;
    const intervalDelay = 8000;
    let rotation = window.setInterval(nextStage, intervalDelay);

    function activate(index) {
      if (!panel || !panelTitle || !panelRoot) return;
      activeIndex = index;
      stages.forEach((stage, i) => {
        const isActive = i === index;
        stage.classList.toggle('is-active', isActive);
        stage.setAttribute('aria-expanded', String(isActive));
      });
      const next = metodoStages[index];
      panelTitle.textContent = next.title;
      panel.textContent = next.description;
      panelRoot.setAttribute('data-stage', String(index));
    }

    function nextStage() {
      const nextIndex = (activeIndex + 1) % stages.length;
      activate(nextIndex);
    }

    journey.addEventListener('mouseenter', () => {
      window.clearInterval(rotation);
    });

    journey.addEventListener('mouseleave', () => {
      window.clearInterval(rotation);
      rotation = window.setInterval(nextStage, intervalDelay);
    });

    stages.forEach((stage, index) => {
      stage.addEventListener('click', () => {
        window.clearInterval(rotation);
        activate(index);
        rotation = window.setInterval(nextStage, intervalDelay);
      });
    });
  }
</script>
