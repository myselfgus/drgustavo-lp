---
import SEO from '../components/SEO.astro';
import StructuredData from '../components/StructuredData.astro';
import Header from '../components/Header.astro';
import SideDots from '../components/SideDots.astro';
import CalEmbed from '../components/CalEmbed.astro';
import ChatWidget from '../components/ChatWidget.astro';
import '../styles/global.css';
import '../styles/variables.css';
import '../styles/animations.css';
import '../styles/micro-interactions.css';
import '../styles/mobile-optimizations.css';

export interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
  showDots?: boolean;
}

const {
  title = 'Dr. Gustavo Mendes e Silva | Psiquiatria com desfecho planejado',
  description = 'Psiquiatra autista em São José do Rio Preto. Consultas de 2h com narrativa fenomenológica da sua história, manual personalizado e alta planejada. ACT focada em valores. Atendimento domiciliar para crianças neurodivergentes. Você não precisará mais de mim.',
  ogImage = '/images/og-default.jpg',
  showDots = true
} = Astro.props;

const isHomePage = Astro.url.pathname === '/';
const cfBeaconToken = import.meta.env.PUBLIC_CF_BEACON_TOKEN;
---

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <SEO title={title} description={description} ogImage={ogImage} />
    
    <!-- Structured Data -->
    <StructuredData />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Fonts -->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Fraunces:opsz,wght@9..144,400..700&family=IBM+Plex+Mono:wght@400;500;600&family=Inter+Tight:wght@300;400;500;600;700&display=swap"
    />
  </head>
  <body>
    <a class="skip-to-content" href="#main-content">Ir para o conteúdo principal</a>
    <Header />
    
    {isHomePage && showDots && <SideDots />}
    
    <main id="main-content">
      <slot />
    </main>

    <elevenlabs-convai agent-id="agent_4301k53hd1fke37983rze0nvdct4"></elevenlabs-convai>
    <script src="https://unpkg.com/@elevenlabs/convai-widget-embed" async type="text/javascript"></script>
    <ChatWidget />
    <CalEmbed />

    <script is:inline>
      const observers = [];

      const disconnectObservers = () => {
        observers.forEach(observer => {
          if (observer && typeof observer.disconnect === 'function') {
            observer.disconnect();
          }
        });
        observers.length = 0;
      };

      const createObserver = (selector, callback, options) => {
        if (!('IntersectionObserver' in window)) {
          return null;
        }

        const observer = new IntersectionObserver(callback, options);
        document.querySelectorAll(selector).forEach(element => observer.observe(element));
        return observer;
      };

      const revealAllImmediately = () => {
        document.querySelectorAll('[data-animate]').forEach(element => {
          element.classList.add('is-visible');
        });

        document.querySelectorAll('[data-stagger] > *').forEach(element => {
          element.classList.add('is-visible');
        });
      };

      const setupRevealAnimations = () => {
        disconnectObservers();

        if (!('IntersectionObserver' in window)) {
          revealAllImmediately();
          return;
        }

        const animateObserver = createObserver(
          '[data-animate]',
          entries => {
            entries.forEach(entry => {
              if (!entry.isIntersecting) return;
              const element = entry.target;
              const delay = element.getAttribute('data-delay');
              if (delay) {
                element.style.setProperty('--reveal-delay', delay);
              }
              requestAnimationFrame(() => {
                element.classList.add('is-visible');
              });
              animateObserver.unobserve(element);
            });
          },
          { threshold: 0.2, rootMargin: '0px 0px -100px 0px' }
        );

        const staggerObserver = createObserver(
          '[data-stagger]',
          entries => {
            entries.forEach(entry => {
              if (!entry.isIntersecting) return;
              const container = entry.target;
              const children = Array.from(container.children);
              children.forEach((child, index) => {
                child.style.setProperty('--stagger-delay', `${index * 90}ms`);
                requestAnimationFrame(() => {
                  child.classList.add('is-visible');
                });
              });
              staggerObserver.unobserve(container);
            });
          },
          { threshold: 0.18, rootMargin: '0px 0px -80px 0px' }
        );

        if (animateObserver) observers.push(animateObserver);
        if (staggerObserver) observers.push(staggerObserver);
      };

      if (typeof window !== 'undefined') {
        const flagKey = '__drgAnimationsInitialized';

        const init = () => {
          if (!window[flagKey]) {
            window[flagKey] = true;
            document.addEventListener('astro:after-swap', setupRevealAnimations);
            document.addEventListener('astro:page-load', setupRevealAnimations);
          }

          setupRevealAnimations();
        };

        init();
      } else {
        revealAllImmediately();
      }
    </script>

    <script>
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
      if (prefersReducedMotion.matches) {
        document.documentElement.classList.add('reduced-motion');
      }
    </script>

    <script>
      // Parallax sutil e lazy loading de imagens
      if (typeof window !== 'undefined' && !window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        // Parallax em backgrounds
        let ticking = false;
        const parallaxElements = document.querySelectorAll('.hero__background, .manifesto__backdrop');

        function updateParallax() {
          const scrolled = window.scrollY;
          parallaxElements.forEach((el) => {
            const speed = 0.5; // Velocidade do parallax (menor = mais sutil)
            const offset = scrolled * speed;
            (el as HTMLElement).style.transform = `translateY(${offset}px)`;
          });
          ticking = false;
        }

        window.addEventListener('scroll', () => {
          if (!ticking) {
            window.requestAnimationFrame(updateParallax);
            ticking = true;
          }
        }, { passive: true });

        // Lazy loading de imagens
        const imageObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const img = entry.target;
                img.classList.add('loaded');
                imageObserver.unobserve(img);
              }
            });
          },
          { rootMargin: '50px' }
        );

        document.querySelectorAll('img[loading="lazy"]').forEach((img) => {
          imageObserver.observe(img);
        });

        // Reading progress bar (apenas em blog posts)
        if (document.querySelector('article.blog-post')) {
          const progressBar = document.createElement('div');
          progressBar.className = 'reading-progress';
          document.body.appendChild(progressBar);

          window.addEventListener('scroll', () => {
            const article = document.querySelector('article.blog-post') as HTMLElement;
            if (!article) return;

            const articleTop = article.offsetTop;
            const articleHeight = article.offsetHeight;
            const windowHeight = window.innerHeight;
            const scrolled = window.scrollY - articleTop + windowHeight;
            const progress = Math.min(Math.max(scrolled / articleHeight, 0), 1);

            progressBar.style.transform = `scaleX(${progress})`;
          }, { passive: true });
        }
      }
    </script>

    {cfBeaconToken && (
      <script
        is:inline
        defer
        src="https://static.cloudflareinsights.com/beacon.min.js"
        data-cf-beacon={JSON.stringify({ token: cfBeaconToken })}
      ></script>
    )}
  </body>
</html>

<style is:global>
  html {
    scroll-behavior: smooth;
  }
  
  body {
    margin: 0;
    font-family: var(--font-sans);
    color: var(--text-primary);
    background: var(--bg-primary);
    line-height: 1.6;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  * {
    box-sizing: border-box;
  }
  
  .reduced-motion * {
    animation: none !important;
    transition: none !important;
  }

  .skip-to-content {
    position: absolute;
    top: -60px;
    left: 0;
    background: var(--text-primary, #1A1A1A);
    color: var(--bg-primary, #FFFFFF);
    padding: 8px 16px;
    text-decoration: none;
    z-index: 10000;
    transition: top 0.2s ease;
  }

  .skip-to-content:focus {
    top: 0;
  }
</style>
